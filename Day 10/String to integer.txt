class Solution {
public:
    int myAtoi(string s) {
        int n = s.size();
        int i = 0;
        long result = 0;
        int sign = 1;

        // Skip leading spaces
        while(i < n && s[i] == ' ') {
            i++;
        }

        // Check for optional sign
        if(i < n && (s[i] == '+' || s[i] == '-')) {
            sign = (s[i] == '-') ? -1 : 1;
            i++;
        }

        // Extract numeric digits and build number
        while(i < n && isdigit(s[i])) {
            result = result * 10 + (s[i] - '0');

            // Overflow check
            if(sign == 1 && result > INT_MAX) return INT_MAX;
            if(sign == -1 && -result < INT_MIN) return INT_MIN;

            i++;
        }

        return sign * result;
    }
};
